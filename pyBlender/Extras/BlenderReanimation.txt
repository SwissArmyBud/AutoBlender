import bpy, math
from math import sin, cos, pi
from mathutils import Vector, Quaternion

# open and load the beat times information
#
beatData = []

beatFile = open('C:\\beat_frames.lfa','r')
for line in beatFile.readlines():
    beatData.extend(line.split())
beatFile.close()

beatFrames = []
beats = 0
for i in range(len(beatData)):
    tmp = beatData[i]
    beatFrames.append(int(float(tmp)))

print("")
print("")
print("Beats Finished Importing")
print("Beats: " + str(beatFrames[beats-1]))
print("")

# open and load the mel volume information
#
volumeData = []
volumeFile = open('C:\\1_bin_mel.lfa','r')
for line in volumeFile.readlines():
    volumeData.extend(line.split())
volumeFile.close()

# open and load mel information
#
MelData = []

melFile = open('C:\\n_bin_mel.lfa','r')
for line in melFile.readlines():
    MelData.append(line.split())
melFile.close()

maxFrames = len(MelData)
melBins = len(MelData[0])

print("Mel Finished Importing")
print("Mel Frames: " + str(maxFrames))
print("Mel Bins: " + str(melBins))
print("")

# setup some basic parameters before creating/animating objects
#
objectName = 'CustomObject'
scn = bpy.context.scene
#sys.exit("This will stop the script!")

for i in range(int((melBins/2)-melBins),int(melBins/2)):
    
    # let the user know which object is being worked on
    #
    print("")
    print("Object being re-animated: " + str(i+1+int(melBins/2)))

    # setup the object mesh and material and insert into scene
    #
    ob = bpy.data.objects[objectName + str(i+int(melBins/2))]

    mat = bpy.data.materials["CustomColor" + str(i+int(melBins/2))]

    scn.objects.active = ob

    ob.rotation_mode = 'QUATERNION'
    
    # script the animation for each object
    #
    for frameNumber in range (1,maxFrames):

        # basic setup and housekeeping for frame animation
        #
        frameMelDataPerBin = (MelData[frameNumber])[(i+int(melBins/2))]

        
        # set the object rotation and write a keyframe (ROTATION PIPES)
        #
        angleX = 0
        angleY = frameNumber/2
        angleZ = frameNumber/3

        angleX = (((angleX%360)-180)/180)*(pi)
        angleY = (((angleY%360)-180)/180)*(pi)
        angleZ = (((angleZ%360)-180)/180)*(pi)
        axisX = [1,0,0]
        axisY = [0,1,0]
        axisZ = [0,0,1]

        objectRotation = Quaternion(axisX,angleX) * Quaternion(axisY,angleY) * Quaternion(axisZ,angleZ)
        objectRotation.normalize()
        
        ob.rotation_quaternion = objectRotation
        ob.keyframe_insert(data_path="rotation_quaternion", index = -1, frame=frameNumber)

        # print out some information about the rendering process
        #
        if(frameNumber%1000==0):
            print("Frame " + str(frameNumber) + " finished...")
    
    # print out some information about the rendering process and forget about the finished object
    #
    print("Object " + str(i+1+int(melBins/2)) + " finished, with " + str(maxFrames) + " frames keyed.")
    ob.select = False