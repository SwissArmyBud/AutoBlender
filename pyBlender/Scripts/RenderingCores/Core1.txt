#
# THIS IS THE BEGINNING OF THE RENDERING CORE FOR BLENDER
#

for i in range(int((melBins/2)-melBins),int(melBins/2)):
    
    # housekeeping and setup for each object
    #
    objectName = 'CustomObject'
    currentBeat = 0

    # let the user know which object is being worked on
    #
    print("")
    print("Object being animated: " + str(i+1+int(melBins/2)))

    # setup the object mesh and material and insert into scene
    #
    me = bpy.data.meshes.new(objectName+'Mesh'+str(i+int(melBins/2)))
    ob = bpy.data.objects.new(objectName + str(i+int(melBins/2)), me)

    faces = ((1,0,4), (4,2,1), (4,3,2), (4,0,3), (0,1,2,3))
    verts = ((varA,varA,varC), (varA,-varA,varC), (-varA,-varA,varC), (-varA,varA,varC), (varC,varC,varB))

    mat = bpy.data.materials.new("CustomColor" + str(i+int(melBins/2)))
    mat.diffuse_color = (1,1,1)
    ob.active_material = mat

    scn.objects.link(ob)
    scn.objects.active = ob

    ob.show_name = False
    ob.rotation_mode = 'QUATERNION'

    me.from_pydata(verts, [], faces)
    me.update()
    
    # script the animation for each object
    #
    for frame in range (1,int(maxFrames/frameSkip)):

        # basic setup and housekeeping for frame animation
        #
        frameNumber = frame * frameSkip
        frameMelDataPerBin = float((MelData[frameNumber])[(i+int(melBins/2))])

        frameIsBeat = False
        if beatFrames[currentBeat] <= frameNumber:
            frameIsBeat = True
            if (currentBeat != (len(beatFrames)-1)):
                currentBeat = currentBeat + 1
                
        # set the object scaling and write a keyframe (SCALING PIPES)
        #
        scaleX = 1

        scaleY = float(volumeData[frameNumber])/8

        scaleZ = frameMelDataPerBin
        scaleZ = (scaleZ/20) + 0.1
        scaleZ = scaleZ*scaleZ*scaleZ

        ob.scale = (scaleX, scaleY, scaleZ)
        ob.keyframe_insert(data_path="scale", index=-1, frame=frameNumber)

        # set the object color and write a keyframe (COLOR PIPES)
        #
        colRed =   (sin(   (frameNumber/155) + (pi*(i/(melBins/2)))    )+1) /2
        colGreen = (cos(   (frameNumber/55 ) + (pi*(i/(melBins/2)))    )+1) /2

        if currentBeat == 0:
            colBlue =  0
        else:
            colBlue =  ( sin( beatFrames[currentBeat] ) +1) /2

        mat.diffuse_color = (colRed,colGreen,colBlue)
        mat.keyframe_insert(data_path="diffuse_color", frame=frameNumber, index=-1)

        # set the object location and write a keyframe (LOCATION PIPES)
        #
        locX = i

        locY = sin((frameNumber/50)+(pi*(i/(melBins/2))))

        locZ = 0

        ob.location = (locX,locY,locZ)
        ob.keyframe_insert(data_path="location", index = -1, frame=frameNumber)

        # set the object rotation and write a keyframe (ROTATION PIPES)
        #
        angleY = 0
        angleZ = currentBeat * (i/(melBins/2))
        angleX = 0
            
        angleX = (((angleX%360)-180)/180)*(pi)
        angleY = (((angleY%360)-180)/180)*(pi)
        angleZ = (((angleZ%360)-180)/180)*(pi)
        axisX = [1,0,0]
        axisY = [0,1,0]
        axisZ = [0,0,1]

        objectRotation = Quaternion(axisX,angleX) * Quaternion(axisY,angleY) * Quaternion(axisZ,angleZ)
        objectRotation.normalize()
        
        ob.rotation_quaternion = objectRotation
        ob.keyframe_insert(data_path="rotation_quaternion", index = -1, frame=frameNumber)

        # print out some information about the rendering process
        #
        if(frameNumber%1000==0):
            print("Frame " + str(frameNumber) + " finished...")
    
    # print out some information about the rendering process and forget about the finished object
    #
    print("Object " + str(i+1+int(melBins/2)) + " finished, with " + str(maxFrames) + " frames keyed.")
    ob.select = False

print("")
print("")
print("    ***** ANIMATION FINISHED *****     ")
print("")
print(" *** THIS IS NOW A BLENDER CONSOLE *** ")
print("")
print("   *** DO NOT CLOSE THIS WINDOW ***    ")
print("")
print("")
print("The next line is not an error:")