import bpy, math, os, sys
from math import sin, cos, pi
from mathutils import Vector, Quaternion

# let the user know Blender is working
#
print("")
print("")
print("")
print("     ATTN: Blender is now working!      ")
print("----------------------------------------")
print("")
print("")

# load the sound file into the program
#
os.chdir('..\\Media\\')
filePth = os.getcwd() + "\\" + sys.argv[4] + ".mp3"
os.chdir('..\\Output\\')

print("Blender adding sound track to the scene:")
print(filePth)
bpy.context.scene.sequence_editor_create()
bpy.context.scene.sequence_editor.sequences.new_sound(filepath=filePth, name="Sound", channel=1,frame_start=0)

# open and load the beat times information
#
beatData = []
beatFile = open('beat_frames.lfa','r')
for line in beatFile.readlines():
    beatData.extend(line.split())
beatFile.close()

beatFrames = []
beats = 0
for i in range(len(beatData)):
    tmp = beatData[i]
    beatFrames.append(int(float(tmp)))

print("")
print("Beats Finished Importing")
print("Beats: " + str(len(beatData)))
print("")

# open and load the mel volume information
#
volumeData = []
volumeFile = open('mel_volume.lfa','r')
for line in volumeFile.readlines():
    volumeData.extend(line.split())
volumeFile.close()

# open and load mel information
#
MelData = []
melFile = open('n_bin_mel.lfa','r')
for line in melFile.readlines():
    MelData.append(line.split())
melFile.close()

maxFrames = len(MelData)
melBins = len(MelData[0])

print("Mel Finished Importing")
print("Mel Frames: " + str(maxFrames))
print("Mel Bins: " + str(melBins))
print("")

# setup some basic parameters before creating/animating objects
#
scn = bpy.context.scene
scn.frame_end = maxFrames

origin = Vector().zero()
meshLoc = Vector().zero()

frameSkip = int(sys.argv[5])

print("Frames traveled per keyframe: " + str(frameSkip))
print("")
print("")
print("")
print("***** ANIMATION STARTED *****")
print("")

#
#	ATTENTION: THIS ENDS THE SCENE SETUP AREA
#	
#	THE REST OF THE TOOL CHAIN IS SIMPLY A RENDERING SCRIPT, AKA "CORE"
#	AND CAN NOW BE REPLACED, MODIFIED, OR REIMPLIMENTED AT WILL
#
#

#
# THIS IS THE BEGINNING OF THE RENDERING CORE FOR BLENDER
#

for i in range(int((melBins/2)-melBins),int(melBins/2)):
    
    # housekeeping and setup for each object
    #
    (varA,varB,varC) = (0.0, 0.5, 1.0)

    faces = ((0,1,5,4), (1,2,6,5), (2,3,7,6), (3,0,4,7), (0,3,2,1), (4,5,6,7))

    verts = ((varB,varB,varC), (varB,-varB,varC), (-varB,-varB,varC), (-varB,varB,varC), (varB,varB,varA), (varB,-varB,varA), (-varB,-varB,varA), (-varB,varB,varA))

    objectName = 'CustomObject'
    currentBeat = 0

    # let the user know which object is being worked on
    #
    print("")
    print("Object being animated: " + str(i+1+int(melBins/2)))

    # setup the object mesh and material and insert into scene
    #
    me = bpy.data.meshes.new(objectName+'Mesh'+str(i+int(melBins/2)))
    ob = bpy.data.objects.new(objectName + str(i+int(melBins/2)), me)

    mat = bpy.data.materials.new("CustomColor" + str(i+int(melBins/2)))
    mat.diffuse_color = (1,1,1)
    ob.active_material = mat

    scn.objects.link(ob)
    scn.objects.active = ob

    ob.show_name = False
    ob.rotation_mode = 'QUATERNION'

    me.from_pydata(verts, [], faces)
    me.update()
    
    # script the animation for each object
    #
    for frame in range (1,int(maxFrames/frameSkip)):

        # basic setup and housekeeping for frame animation
        #
        frameNumber = frame * frameSkip
        frameMelDataPerBin = float((MelData[frameNumber])[(i+int(melBins/2))])

        frameIsBeat = False
        if beatFrames[currentBeat] <= frameNumber:
            frameIsBeat = True
            if (currentBeat != (len(beatFrames)-1)):
                currentBeat = currentBeat + 1
                
        # set the object scaling and write a keyframe (SCALING PIPES)
        #
        scaleX = 1

        scaleY = float(volumeData[frameNumber])/10

        scaleZ = frameMelDataPerBin
        scaleZ = (scaleZ/20) + 0.1
        scaleZ = scaleZ*scaleZ*scaleZ

        ob.scale = (scaleX, scaleY, scaleZ)
        ob.keyframe_insert(data_path="scale", index=-1, frame=frameNumber)

        # set the object color and write a keyframe (COLOR PIPES)
        #
        colRed =   (frameMelDataPerBin)/60
        colGreen = 1 - colRed
        colBlue = 0

        mat.diffuse_color = (colRed,colGreen,colBlue)
        mat.keyframe_insert(data_path="diffuse_color", frame=frameNumber, index=-1)

        # set the object location and write a keyframe (LOCATION PIPES)
        #
        locX = i

        locY = 0

        locZ = 0

        ob.location = (locX,locY,locZ)
        ob.keyframe_insert(data_path="location", index = -1, frame=frameNumber)

        # set the object rotation and write a keyframe (ROTATION PIPES)
        #
        angleY = 0
        angleZ = currentBeat * 5
        angleX = 0
            
        angleX = (((angleX%360)-180)/180)*(pi)
        angleY = (((angleY%360)-180)/180)*(pi)
        angleZ = (((angleZ%360)-180)/180)*(pi)
        axisX = [1,0,0]
        axisY = [0,1,0]
        axisZ = [0,0,1]

        objectRotation = Quaternion(axisX,angleX) * Quaternion(axisY,angleY) * Quaternion(axisZ,angleZ)
        objectRotation.normalize()
        
        ob.rotation_quaternion = objectRotation
        ob.keyframe_insert(data_path="rotation_quaternion", index = -1, frame=frameNumber)

        # print out some information about the rendering process
        #
        if(frameNumber%1000==0):
            print("Frame " + str(frameNumber) + " finished...")
    
    # print out some information about the rendering process and forget about the finished object
    #
    print("Object " + str(i+1+int(melBins/2)) + " finished, with " + str(maxFrames) + " frames keyed.")
    ob.select = False

print("")
print("")
print("    ***** ANIMATION FINISHED *****     ")
print("")
print(" *** THIS IS NOW A BLENDER CONSOLE *** ")
print("")
print("   *** DO NOT CLOSE THIS WINDOW ***    ")
print("")
print("")
print("The next line is not an error:")